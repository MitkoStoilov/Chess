<link rel="stylesheet" href="/css/style.css">
<link rel="stylesheet" href="/css/chessboard-0.3.0.min.css">
<script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
<script src="/js/chessboard-0.3.0.min.js"></script>
<script src="/js/chess.js"></script>
<script src="/socket.io/socket.io.js"></script>
<div id = "container">
  <h1>In Game</h1>
  <h4>room number:</h4>
  <h4 id="roomno"></h4>
  <a href="/logout">Logout</a><br/>

  <div id="board" style="width: 400px; margin-top: 30px"></div>

  <div id="game_data">
    <p>Status: <span id="status"></span></p>
    <p>FEN: <span id="fen"></span></p>
    <p>PGN: <span id="pgn"></span></p>
  </div>
</div>

<script type="text/javascript">
  var parameter = window.location.search.replace( "?", "" );
  var values = parameter.split("=");
  var roomno = values[1];
  document.getElementById('roomno').innerHTML = values[1];


  $(function(){
      var socket = io.connect();
      //var roomno;
      //var room = $('#room');
      /*socket.on('connectToRoom',function(data) {
          roomno = data;
          room.html(data);
      });*/
      socket.emit('connectToRoom', roomno);



      var fen;

      var board,
        game = new Chess(),
        statusEl = $('#status'),
        fenEl = $('#fen'),
        pgnEl = $('#pgn');



      var onDragStart = function(source, piece, position, orientation) {
        if (game.game_over() === true ||
            (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
            (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
          return false;
        }
      };

      var onDrop = function(source, target) {

        var move = game.move({
          from: source,
          to: target,
          promotion: 'q'
        });

        if (move === null) return 'snapback';

        socket.emit('make a move', {fen: game.fen(), num: roomno});

        updateStatus();

      };


      var onSnapEnd = function() {
        board.position(game.fen());
      };

      socket.on('load', function(data) {
        board.position(data);
        game.load(data);
        updateStatus();
      });

      socket.on('new move', function(data){
        board.position(data);
        game.load(data);
        updateStatus();
      });


      var updateStatus = function() {

        var status = '';

        var moveColor = 'White';
        if (game.turn() === 'b') {
          moveColor = 'Black';
        }


        if (game.in_checkmate() === true) {
          status = 'Game over, ' + moveColor + ' is in checkmate.';
        }


        else if (game.in_draw() === true) {
          status = 'Game over, drawn position';
        }


        else {
          status = moveColor + ' to move';


        if (game.in_check() === true) {
          status += ', ' + moveColor + ' is in check';
        }
      }

        statusEl.html(status);
        fenEl.html(game.fen());
        pgnEl.html(game.pgn());
      };

      var cfg = {
        draggable: true,
        position: 'start',
        onDragStart: onDragStart,
        onDrop: onDrop,
        onSnapEnd: onSnapEnd
      };
      board = ChessBoard('board', cfg);

      updateStatus();
    });

</script>
